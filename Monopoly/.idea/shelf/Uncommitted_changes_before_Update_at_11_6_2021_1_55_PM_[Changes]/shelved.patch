Index: src/Monopoly.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Scanner;\r\n\r\npublic class Monopoly {\r\n    /**\r\n     * The Monopoly class\r\n     *\r\n     * This class is the brains of the game,\r\n     * it controls all the functions and how the players\r\n     * move about the board.\r\n     *\r\n     * @attribute board type Board, is one instance\r\n     * @attribute players type ArrayList<Player> contains the list\r\n     * players that are currently playing\r\n     * @attribute die type Dice is the die that will be used for the game\r\n     * @attribute playerTurn type int is used to determine whose turn it is\r\n     */\r\n    private final Board board;\r\n    private List<Player> players;\r\n    private Dice die;\r\n    private int diceValue;\r\n    private boolean validCommand = false;\r\n    private boolean running = true;\r\n    int playerTurn;\r\n\r\n    public Monopoly() {\r\n        this.board = new Board();\r\n        this.die = new Dice();\r\n        this.players = new ArrayList<>();\r\n        this.playerTurn = 0;\r\n    }\r\n\r\n    /**\r\n     * This method is called if a player goes bankrupt, it first removes all the players ownerships and\r\n     * then removes the player from the game.\r\n     *\r\n     * Created and documented by Matthew Belanger\r\n     */\r\n    public void removePlayer() {\r\n        this.players.get(this.playerTurn).removeProperties();\r\n        this.players.remove(this.playerTurn);\r\n    }\r\n\r\n    /**\r\n     * Roll() method rolls the dice\r\n     * @return the random int generated by rolling the die\r\n     *\r\n     * Created and documented by Nathan MacDiarmid - 101098993\r\n     */\r\n    public int roll() {\r\n        return this.die.roll();\r\n    }\r\n\r\n    /**\r\n     * This method is used to get the player whose turn it is\r\n     * @return the current Player object\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public Player getPlayer(){\r\n        return this.players.get(playerTurn);\r\n    }\r\n\r\n    /**\r\n     * This method returns a string representation of the property that the Player is currently on\r\n     * @return string representation of a Property\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public String getPropertyInfo(){\r\n        return this.board.getProperty(this.getPlayer().getPosition()).toString();\r\n    }\r\n\r\n    /**\r\n     * This method returns the owner (which is a Player object) of the Property the Player is currently on\r\n     * @return Player object\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public Player getPropertyOwner(){\r\n        return this.board.getProperty(this.getPlayer().getPosition()).getOwner();\r\n    }\r\n\r\n    /**\r\n     * This method calls the current Player's buy method and passes the property they are currently on as a parameter\r\n     * @return a boolean to indicate whether the buy was successful or not\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public boolean playerBuy(){\r\n        return this.getPlayer().buy(this.board.getProperty(this.getPlayer().getPosition()));\r\n    }\r\n\r\n    /**\r\n     * This method calls the current Player's rent method and passes the property they are currently on as a parameter\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public void playerRent(){\r\n        this.getPlayer().rent(this.board.getProperty(this.getPlayer().getPosition()));\r\n    }\r\n\r\n    /**\r\n     * This method adds money to the Player the rent is being paid too. This is done by getting the Player who owns the\r\n     * property the current Player is on and then calling the addMoney() method on the Player owning the property.\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public void payRent(){\r\n        this.board.getProperty(this.getPlayer().getPosition()).getOwner().addMoney(this.board.getProperty(this.getPlayer().getPosition()).getRent());\r\n    }\r\n\r\n    /**\r\n     * This method will return the rent amount of the Property the current Player is on\r\n     * @return rent value in the form of an int\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323 and Tao - 101164153\r\n     */\r\n    public int getRent(){\r\n        return this.board.getProperty(this.getPlayer().getPosition()).getRent();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public void addPlayerCommand() {\r\n        while (running) {\r\n            if (this.players.size() >= 4) {\r\n                System.out.println(\"Sorry, max is 4 players\");\r\n                break;\r\n            }\r\n            System.out.println(\"Please input your name:\");\r\n            System.out.print(\">>> \");\r\n\r\n            Scanner playerInput = new Scanner(System.in);\r\n            String name = playerInput.nextLine();\r\n\r\n            this.players.add(new Player(name));\r\n\r\n            //Loop until a valid command is entered\r\n            validCommand = false;\r\n            while(!validCommand) {\r\n                System.out.println(\"Add another player? Enter 'yes', 'no' or 'quit'\");\r\n                System.out.print(\">>> \");\r\n\r\n                Scanner morePlayers = new Scanner(System.in);\r\n                String addPlayers = morePlayers.nextLine();\r\n\r\n                switch (addPlayers) {\r\n                    case \"yes\":\r\n                        System.out.println(\"Great! Lets add some friends!\");\r\n                        validCommand = true;\r\n                        break;\r\n                    case \"no\":\r\n                        running = false;\r\n                        validCommand = true;\r\n                        break;\r\n                    case \"quit\":\r\n                        return;\r\n                    default:\r\n                        System.out.println(\"Command not recognized\");\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is the method that actually runs the game, it starts by getting names for every player in the game and adding them to the list\r\n     * of players. Next it runs a loop that will loop until only one player remains, this loop starts by getting the player whose turn\r\n     * it is to roll the dice. The value they roll will be added to their current position, they will then move the corresponding amount of\r\n     * spaces on the board landing on a property space. If the property is unowned they will be prompted to buy said property, if another\r\n     * player owns the property they will pay this player the rent of the property. The players turn then ends, the player's money is then checked\r\n     * to see if they are bankrupt, if they are then they are removed from the game. If a player is removed from the game then the list of players\r\n     * is checked to see if only one player remains, if only one player remains then the game is over and this player wins. Finally at the end of the loop\r\n     * the playerTurn counter is increased so that the game knows it is the next players turn.\r\n     *\r\n     * Created and documented by Matthew Belanger - 101144323, Nathan MacDiarmid - 101098993, Tao - 101164153\r\n     */\r\n    public void play(){\r\n\r\n        addPlayerCommand();\r\n\r\n        //Check to make sure there are at least 2 players\r\n        if(this.players.size() < 2){\r\n            System.out.println(\"Game was not initialized with enough players, EXITING\");\r\n            return;\r\n        }\r\n        else{\r\n            System.out.println(\"Welcome to Monopoly, let's play\");\r\n            running = true;\r\n        }\r\n\r\n        while(running){\r\n            System.out.println(this.getPlayer().getName() + \" it is your turn\");\r\n\r\n            //Get user input\r\n            Scanner rollInput = new Scanner(System.in);\r\n            System.out.println(\"Enter 'roll' to roll the Dice, 'info' to show player info or 'quit' to quit the game\");\r\n            System.out.print(\">>> \");\r\n            String input = rollInput.nextLine();\r\n\r\n            //Check user input\r\n            switch (input) {\r\n                case \"roll\":\r\n                    diceValue = this.roll();\r\n                    System.out.println(\"You rolled a \" + diceValue);\r\n                    this.getPlayer().addPosition(diceValue);\r\n\r\n                    System.out.println(\"You landed on \" + getPropertyInfo());\r\n\r\n                    // check if property is not owned\r\n                    if (this.getPropertyOwner() == null) {\r\n                        // check if lands on Go\r\n                        if (this.board.getProperty(this.getPlayer().getPosition()).equals(this.board.getProperty(0))) {\r\n                            break;\r\n                        }\r\n\r\n                        //Loop until the player enters a valid command, this way they don't lose their chance to buy\r\n                        validCommand = false;\r\n                        while(!validCommand) {\r\n                            System.out.println(\"Would you like to buy this property? You currently have $\"\r\n                                    + this.getPlayer().getMoney() + \"\\t Enter 'yes' to Buy or 'no' to continue playing\");\r\n                            System.out.print(\">>> \");\r\n\r\n                            //Get user input\r\n                            Scanner buyInput = new Scanner(System.in);\r\n                            String inputBuy = buyInput.nextLine();\r\n\r\n                            //Check user input\r\n                            if (inputBuy.equals(\"yes\")) {\r\n                                //give option to buy property\r\n                                if (this.playerBuy()) {\r\n                                    System.out.println(\"You bought the Property!\");\r\n                                } else {\r\n                                    System.out.println(\"You do not have enough money to buy this property\");\r\n                                }\r\n                                validCommand = true;\r\n                            } else if (inputBuy.equals(\"no\")) {\r\n                                System.out.println(\"You did not buy the Property!\");\r\n                                validCommand = true;\r\n                            } else {\r\n                                System.out.println(\"Not a valid command\");\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // if this player is not the owner\r\n                        if (this.getPlayer() != this.getPropertyOwner()) {\r\n                            //pay rent\r\n                            this.playerRent();\r\n                            this.payRent();\r\n                            System.out.println(\"You paid $\" + this.getRent() + \" of rent to \" + this.getPropertyOwner().getName());\r\n                            System.out.println(\"You now have $\" + this.getPlayer().getMoney());\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"info\":\r\n                    System.out.println(this.getPlayer().toString());\r\n                    System.out.println(this.getPlayer().getProperties());\r\n                    System.out.println(\"You are currently on \" + this.getPropertyInfo());\r\n                    continue;\r\n                case \"quit\":\r\n                    running = false;\r\n                    continue;\r\n                default:\r\n                    System.out.println(\"Command not recognized\");\r\n                    continue;\r\n            }\r\n\r\n            //Check to see if the current player has run out of money\r\n            if(getPlayer().getMoney() <= 0 ){\r\n                System.out.println(this.getPlayer().getName() + \" has gone bankrupt and is eliminated from the game!\");\r\n                this.removePlayer();\r\n                //Check to see if there is only one player left, as if there is they've won\r\n                if(this.players.size() == 1){\r\n                    System.out.println(\"Game over \" + this.players.get(0).getName() + \" has won\");\r\n                    running = false;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            //Increase playerTurn to pass the turn to the next player\r\n            this.playerTurn = (this.playerTurn + 1) % this.players.size();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Monopoly monopoly = new Monopoly();\r\n\r\n        monopoly.play();\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Monopoly.java b/src/Monopoly.java
--- a/src/Monopoly.java	
+++ b/src/Monopoly.java	
@@ -166,120 +166,113 @@
         }
     }
 
-    /**
-     * This is the method that actually runs the game, it starts by getting names for every player in the game and adding them to the list
-     * of players. Next it runs a loop that will loop until only one player remains, this loop starts by getting the player whose turn
-     * it is to roll the dice. The value they roll will be added to their current position, they will then move the corresponding amount of
-     * spaces on the board landing on a property space. If the property is unowned they will be prompted to buy said property, if another
-     * player owns the property they will pay this player the rent of the property. The players turn then ends, the player's money is then checked
-     * to see if they are bankrupt, if they are then they are removed from the game. If a player is removed from the game then the list of players
-     * is checked to see if only one player remains, if only one player remains then the game is over and this player wins. Finally at the end of the loop
-     * the playerTurn counter is increased so that the game knows it is the next players turn.
-     *
-     * Created and documented by Matthew Belanger - 101144323, Nathan MacDiarmid - 101098993, Tao - 101164153
-     */
-    public void play(){
-
-        addPlayerCommand();
-
-        //Check to make sure there are at least 2 players
-        if(this.players.size() < 2){
-            System.out.println("Game was not initialized with enough players, EXITING");
-            return;
-        }
-        else{
-            System.out.println("Welcome to Monopoly, let's play");
-            running = true;
-        }
-
-        while(running){
-            System.out.println(this.getPlayer().getName() + " it is your turn");
-
-            //Get user input
-            Scanner rollInput = new Scanner(System.in);
-            System.out.println("Enter 'roll' to roll the Dice, 'info' to show player info or 'quit' to quit the game");
-            System.out.print(">>> ");
-            String input = rollInput.nextLine();
-
-            //Check user input
-            switch (input) {
-                case "roll":
-                    diceValue = this.roll();
-                    System.out.println("You rolled a " + diceValue);
-                    this.getPlayer().addPosition(diceValue);
+    public void checkUserInput(){
+        //Check user input
+        switch (input) {
+            case "roll":
+                diceValue = this.roll();
+                System.out.println("You rolled a " + diceValue);
+                this.getPlayer().addPosition(diceValue);
 
-                    System.out.println("You landed on " + getPropertyInfo());
+                System.out.println("You landed on " + getPropertyInfo());
 
-                    // check if property is not owned
-                    if (this.getPropertyOwner() == null) {
-                        // check if lands on Go
-                        if (this.board.getProperty(this.getPlayer().getPosition()).equals(this.board.getProperty(0))) {
-                            break;
-                        }
+                // check if property is not owned
+                if (this.getPropertyOwner() == null) {
+                    // check if lands on Go
+                    if (this.board.getProperty(this.getPlayer().getPosition()).equals(this.board.getProperty(0))) {
+                        break;
+                    }
 
-                        //Loop until the player enters a valid command, this way they don't lose their chance to buy
-                        validCommand = false;
-                        while(!validCommand) {
-                            System.out.println("Would you like to buy this property? You currently have $"
-                                    + this.getPlayer().getMoney() + "\t Enter 'yes' to Buy or 'no' to continue playing");
-                            System.out.print(">>> ");
+                    //Loop until the player enters a valid command, this way they don't lose their chance to buy
+                    validCommand = false;
+                    while(!validCommand) {
+                        System.out.println("Would you like to buy this property? You currently have $"
+                                + this.getPlayer().getMoney() + "\t Enter 'yes' to Buy or 'no' to continue playing");
+                        System.out.print(">>> ");
 
-                            //Get user input
-                            Scanner buyInput = new Scanner(System.in);
-                            String inputBuy = buyInput.nextLine();
+                        //Get user input
+                        Scanner buyInput = new Scanner(System.in);
+                        String inputBuy = buyInput.nextLine();
 
-                            //Check user input
-                            if (inputBuy.equals("yes")) {
-                                //give option to buy property
-                                if (this.playerBuy()) {
-                                    System.out.println("You bought the Property!");
-                                } else {
-                                    System.out.println("You do not have enough money to buy this property");
-                                }
-                                validCommand = true;
-                            } else if (inputBuy.equals("no")) {
-                                System.out.println("You did not buy the Property!");
-                                validCommand = true;
-                            } else {
-                                System.out.println("Not a valid command");
-                            }
-                        }
-                    } else {
-                        // if this player is not the owner
-                        if (this.getPlayer() != this.getPropertyOwner()) {
-                            //pay rent
-                            this.playerRent();
-                            this.payRent();
-                            System.out.println("You paid $" + this.getRent() + " of rent to " + this.getPropertyOwner().getName());
-                            System.out.println("You now have $" + this.getPlayer().getMoney());
-                        }
-                    }
+                        //Check user input
+                        if (inputBuy.equals("yes")) {
+                            //give option to buy property
+                            if (this.playerBuy()) {
+                                System.out.println("You bought the Property!");
+                            } else {
+                                System.out.println("You do not have enough money to buy this property");
+                            }
+                            validCommand = true;
+                        } else if (inputBuy.equals("no")) {
+                            System.out.println("You did not buy the Property!");
+                            validCommand = true;
+                        } else {
+                            System.out.println("Not a valid command");
+                        }
+                    }
+                } else {
+                    // if this player is not the owner
+                    if (this.getPlayer() != this.getPropertyOwner()) {
+                        //pay rent
+                        this.playerRent();
+                        this.payRent();
+                        System.out.println("You paid $" + this.getRent() + " of rent to " + this.getPropertyOwner().getName());
+                        System.out.println("You now have $" + this.getPlayer().getMoney());
+                    }
+                }
 
-                    break;
-                case "info":
-                    System.out.println(this.getPlayer().toString());
-                    System.out.println(this.getPlayer().getProperties());
-                    System.out.println("You are currently on " + this.getPropertyInfo());
-                    continue;
-                case "quit":
-                    running = false;
-                    continue;
-                default:
-                    System.out.println("Command not recognized");
-                    continue;
-            }
-
-            //Check to see if the current player has run out of money
-            if(getPlayer().getMoney() <= 0 ){
-                System.out.println(this.getPlayer().getName() + " has gone bankrupt and is eliminated from the game!");
-                this.removePlayer();
-                //Check to see if there is only one player left, as if there is they've won
-                if(this.players.size() == 1){
-                    System.out.println("Game over " + this.players.get(0).getName() + " has won");
-                    running = false;
-                    continue;
-                }
-            }
+                break;
+            case "info":
+                System.out.println(this.getPlayer().toString());
+                System.out.println(this.getPlayer().getProperties());
+                System.out.println("You are currently on " + this.getPropertyInfo());
+                continue;
+            case "quit":
+                running = false;
+                continue;
+            default:
+                System.out.println("Command not recognized");
+                continue;
+        }
+
+1
+    }
+
+    /**
+     * This is the method that actually runs the game, it starts by getting names for every player in the game and adding them to the list
+     * of players. Next it runs a loop that will loop until only one player remains, this loop starts by getting the player whose turn
+     * it is to roll the dice. The value they roll will be added to their current position, they will then move the corresponding amount of
+     * spaces on the board landing on a property space. If the property is unowned they will be prompted to buy said property, if another
+     * player owns the property they will pay this player the rent of the property. The players turn then ends, the player's money is then checked
+     * to see if they are bankrupt, if they are then they are removed from the game. If a player is removed from the game then the list of players
+     * is checked to see if only one player remains, if only one player remains then the game is over and this player wins. Finally at the end of the loop
+     * the playerTurn counter is increased so that the game knows it is the next players turn.
+     *
+     * Created and documented by Matthew Belanger - 101144323, Nathan MacDiarmid - 101098993, Tao - 101164153
+     */
+    public void play(){
+
+        addPlayerCommand();
+
+        //Check to make sure there are at least 2 players
+        if(this.players.size() < 2){
+            System.out.println("Game was not initialized with enough players, EXITING");
+            return;
+        }
+        else{
+            System.out.println("Welcome to Monopoly, let's play");
+            running = true;
+        }
+
+        while(running){
+            System.out.println(this.getPlayer().getName() + " it is your turn");
+
+            //Get user input
+            Scanner rollInput = new Scanner(System.in);
+            System.out.println("Enter 'roll' to roll the Dice, 'info' to show player info or 'quit' to quit the game");
+            System.out.print(">>> ");
+            String input = rollInput.nextLine();
+
 
             //Increase playerTurn to pass the turn to the next player
             this.playerTurn = (this.playerTurn + 1) % this.players.size();
